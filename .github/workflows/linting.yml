name: Code Quality Checks

on:
  pull_request:
    branches:
      - '**'
  push:
    branches:
      - main

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # linting:
  #   name: ESLint
  #   timeout-minutes: 15
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v3
  #       with:
  #         fetch-depth: 1
  #     - uses: actions/setup-node@v3
  #       with:
  #         node-version: 18
  #     - name: Get yarn cache directory path
  #       id: yarn-cache-dir-path
  #       run: echo "::set-output name=dir::$(yarn cache dir)"
  #     - uses: actions/cache@v3
  #       name: Yarn Cache
  #       id: yarn-cache
  #       with:
  #         path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
  #         key: ${{ runner.os }}-yarn-${{ hashFiles('**/package.json') }}
  #         restore-keys: |
  #           ${{ runner.os }}-yarn-
  #     - name: Yarn Install
  #       uses: nick-fields/retry@v2
  #       with:
  #         timeout_minutes: 3
  #         retry_wait_seconds: 30
  #         max_attempts: 3
  #         command: yarn --no-audit --prefer-offline
  #     - name: Lint
  #       run: yarn lint
  #     - name: Save Code Linting Report JSON
  #       run: yarn lint:report
  #       continue-on-error: true
  #     - name: Annotate Code Linting Results
  #       uses: ataylorme/eslint-annotate-action@1.1.2
  #       continue-on-error: true
  #       with:
  #         repo-token: '${{ secrets.GITHUB_TOKEN }}'
  #         report-json: 'eslint-report.json'
  #     - name: Upload ESLint report
  #       uses: actions/upload-artifact@v2
  #       with:
  #         name: eslint-report.json
  #         path: eslint-report.json

  typescript:
    name: TypeScript Build Validation
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 1
      - uses: actions/setup-node@v4
        with:
          node-version: 18
      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"
      - uses: actions/cache@v3
        name: Yarn Cache
        id: yarn-cache
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/package.json') }}
          restore-keys: |
            ${{ runner.os }}-yarn-
      - name: Yarn Install
        uses: nick-fields/retry@v2
        with:
          timeout_minutes: 3
          retry_wait_seconds: 30
          max_attempts: 3
          command: yarn --no-audit --prefer-offline
      - name: Lint
        run: yarn tsc:compile

  # typedoc:
  #   name: TypeDoc Generation
  #   runs-on: ubuntu-latest
  #   timeout-minutes: 15
  #   steps:
  #     - uses: actions/checkout@v4
  #       with:
  #         fetch-depth: 1
  #     - uses: actions/setup-node@v3
  #       with:
  #         node-version: 18
  #     - name: Get yarn cache directory path
  #       id: yarn-cache-dir-path
  #       run: echo "::set-output name=dir::$(yarn cache dir)"
  #     - uses: actions/cache@v3
  #       name: Yarn Cache
  #       id: yarn-cache
  #       with:
  #         path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
  #         key: ${{ runner.os }}-yarn-${{ hashFiles('**/package.json') }}-with-website
  #         restore-keys: |
  #           ${{ runner.os }}-yarn-
  #     - name: Yarn Install
  #       uses: nick-fields/retry@v2
  #       with:
  #         timeout_minutes: 3
  #         retry_wait_seconds: 30
  #         max_attempts: 3
  #         command: yarn --no-audit --prefer-offline
  #     - name: Yarn Install (Website)
  #       uses: nick-fields/retry@v2
  #       with:
  #         timeout_minutes: 3
  #         retry_wait_seconds: 30
  #         max_attempts: 3
  #         command: cd website && yarn --no-audit --prefer-offline
  #     - name: Generate TypeDoc
  #       run: node -e "require('./website/scripts/generate-typedoc').generateTypedoc()"
